rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role checking
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isLecturer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'lecturer' || isAdmin();
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAssignedLecturer(courseId) {
      return exists(/databases/$(database)/documents/courses/$(courseId)/lecturers/$(request.auth.uid));
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own data, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      // Only admins can create users
      allow create: if isAdmin();
      // Only admins can update user roles, users can update their own non-role data
      allow update: if isAdmin() || (isOwner(userId) && 
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']));
      allow delete: if isAdmin();
    }
    
    // Enrollments collection
    match /enrollments/{enrollmentId} {
      // Users can read their own enrollments, lecturers can read enrollments for their courses, admins can read all
      allow read: if isOwner(resource.data.userId) || 
                   (isLecturer() && isAssignedLecturer(resource.data.courseId)) || 
                   isAdmin();
      // Users can create their own enrollments, admins can create any
      allow create: if isOwner(request.resource.data.userId) || isAdmin();
      // Users can update their own enrollments, lecturers can update enrollments for their courses, admins can update all
      allow update: if isOwner(resource.data.userId) || 
                    (isLecturer() && isAssignedLecturer(resource.data.courseId)) || 
                    isAdmin();
      allow delete: if isAdmin();
    }
    
    // Courses collection
    match /courses/{courseId} {
      // Anyone can read public courses, authenticated users can read all courses
      allow read: if resource.data.isPublic == true || isAuthenticated();
      // Only lecturers and admins can create/update/delete courses
      allow write: if isLecturer() || isAdmin();
      
      // Nested lecturers collection
      match /lecturers/{lecturerId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
      }
    }
    
    // Lessons collection
    match /lessons/{lessonId} {
      // Anyone can read public lessons, authenticated users can read all lessons
      allow read: if resource.data.isPublic == true || isAuthenticated();
      // Only lecturers assigned to the course and admins can create/update/delete lessons
      allow write: if (isLecturer() && isAssignedLecturer(resource.data.courseId)) || isAdmin();
    }
    
    // Assignments collection
    match /assignments/{assignmentId} {
      // Anyone can read public assignments, authenticated users can read all assignments
      allow read: if resource.data.isPublic == true || isAuthenticated();
      // Only lecturers assigned to the course and admins can create/update/delete assignments
      allow write: if (isLecturer() && isAssignedLecturer(resource.data.courseId)) || isAdmin();
    }
    
    // Assignment submissions collection
    match /assignmentSubmissions/{submissionId} {
      // Users can read their own submissions, lecturers can read submissions for their assignments, admins can read all
      allow read: if isOwner(resource.data.userId) || 
                   (isLecturer() && isAssignedLecturer(resource.data.courseId)) || 
                   isAdmin();
      // Users can create their own submissions
      allow create: if isOwner(request.resource.data.userId);
      // Users can update their own submissions, lecturers can grade submissions, admins can update all
      allow update: if isOwner(resource.data.userId) || 
                    (isLecturer() && isAssignedLecturer(resource.data.courseId)) || 
                    isAdmin();
      allow delete: if isAdmin();
    }
    
    // Quizzes collection
    match /quizzes/{quizId} {
      // Anyone can read public quizzes, authenticated users can read all quizzes
      allow read: if resource.data.isPublic == true || isAuthenticated();
      // Only lecturers assigned to the course and admins can create/update/delete quizzes
      allow write: if (isLecturer() && isAssignedLecturer(resource.data.courseId)) || isAdmin();
    }
    
    // Quiz attempts collection
    match /quizAttempts/{attemptId} {
      // Users can read their own attempts, lecturers can read attempts for their quizzes, admins can read all
      allow read: if isOwner(resource.data.userId) || 
                   (isLecturer() && isAssignedLecturer(resource.data.courseId)) || 
                   isAdmin();
      // Users can create their own attempts
      allow create: if isOwner(request.resource.data.userId);
      // Only admins can update/delete quiz attempts
      allow update, delete: if isAdmin();
    }
    
    // Lesson progress collection
    match /lessonProgress/{progressId} {
      // Users can read their own progress, lecturers can read progress for their lessons, admins can read all
      allow read: if isOwner(resource.data.userId) || 
                   (isLecturer() && isAssignedLecturer(resource.data.courseId)) || 
                   isAdmin();
      // Users can create/update their own progress
      allow create, update: if isOwner(request.resource.data.userId);
      // Only admins can delete progress
      allow delete: if isAdmin();
    }
    
    // Files collection (for Google Drive integration)
    match /files/{fileId} {
      // Users can read their own files, lecturers can read files for their courses, admins can read all
      allow read: if isOwner(resource.data.uploadedBy) || 
                   (isLecturer() && isAssignedLecturer(resource.data.courseId)) || 
                   isAdmin();
      // Users can create their own files
      allow create: if isOwner(request.resource.data.uploadedBy);
      // Only admins can update/delete files
      allow update, delete: if isAdmin();
    }
  }
}
